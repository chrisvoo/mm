version: '3.8'

volumes:
  dbdata:
  dbdata_test:  

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # This makes nginx reload its configuration (and certificates) every six hours in the background and launches nginx in the foreground.  
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    # This will check if your certificate is up for renewal every 12 hours as recommended by Letâ€™s Encrypt.
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    image: certbot/certbot
    restart: always
    container_name: certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  gateway:
    image: "node:16"
    container_name: gateway
    restart: always
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=${GATEWAY_NODE_ENV}
      - PORT=${GATEWAY_PORT}
      - LOGS_LEVEL=${GATEWAY_LOGS_LEVEL}
      - LOGS_DAYS_RETENTION=${GATEWAY_LOGS_DAYS_RETENTION}
    volumes:
      - ./gateway:/home/node/app
    expose:
      - "${GATEWAY_PORT}"
    command: ${GATEWAY_COMMAND}
    depends_on:
      - nginx  
  filemanager:
    container_name: filemanager
    restart: always
    build:
      context: filemanager
      dockerfile: Dockerfile
    image: filemanager:latest
    ports:
      - ${FILE_MANAGER_PORT}:${FILE_MANAGER_PORT}
    environment:
      - FILE_MANAGER_PORT=${FILE_MANAGER_PORT}
      - LOGS_LEVEL=${FILE_MANAGER_LOGS_LEVEL}
      - MUSIC_DIRECTORY=${MUSIC_CONTAINER_DIRECTORY}
      - MYSQL_HOST=${MYSQL_CONTAINER_NAME}
      - MYSQL_PORT=${MYSQL_LOCAL_PORT}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - ENV=PRODUCTION
    volumes:
      - ${MUSIC_LOCAL_DIRECTORY}:${MUSIC_CONTAINER_DIRECTORY}
    depends_on:
      - nginx
      - mysql
  mysql_test:
    container_name: mysql_test
    image: mysql:latest
    restart: always
    volumes:
      - ./data/mysql/conf.d:/etc/mysql/conf.d
      - ./data/mysql/initdb.d:/docker-entrypoint-initdb.d
      - dbdata_test:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}_test
      - MYSQL_USER=${MYSQL_USER}_test
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_LOCAL_PORT_TEST}:3306    
  mysql:
    container_name: mysql
    image: mysql:latest
    restart: always
    volumes:
      - ./data/mysql/conf.d:/etc/mysql/conf.d
      - ./data/mysql/initdb.d:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_LOCAL_PORT}:3306        
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - ${ADMINER_LOCAL_PORT}:8080   
    depends_on:
      - mysql   
  api_docs:
    container_name: api_docs
    image: swaggerapi/swagger-ui
    ports:
      - ${SWAGGER_LOCAL_PORT}:8080
    volumes:
      - ./docs/swagger.json:/app/swagger.json
    environment:
      - SWAGGER_JSON=/app/swagger.json
      - BASE_URL=/api